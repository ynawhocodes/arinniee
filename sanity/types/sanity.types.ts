/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type Film = {
  _id: string;
  _type: "film";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
};

export type Compcard = {
  _id: string;
  _type: "compcard";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
};

export type Drawing = {
  _id: string;
  _type: "drawing";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
};

export type Artwork = {
  _id: string;
  _type: "artwork";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  images?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
    _key: string;
  }>;
};

export type SiteSetting = {
  _id: string;
  _type: "siteSetting";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  seo?: {
    description: string;
    ogImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
    keywords?: Array<string>;
  };
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityFileAsset | Geopoint | Slug | Film | Compcard | Drawing | Artwork | SiteSetting | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata | Color | RgbaColor | HsvaColor | HslaColor;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/queries/artwork.ts
// Variable: artworkQuery
// Query: *[_type == "artwork"][0]{  _id,  "images": images[]{    "image": asset,    "metadata": asset->metadata  },}
export type ArtworkQueryResult = {
  _id: string;
  images: Array<{
    image: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    } | null;
    metadata: SanityImageMetadata | null;
  }> | null;
} | null;

// Source: ./sanity/queries/compcard.ts
// Variable: compcardQuery
// Query: *[_type == "compcard"][0]{  _id,  "images": images[]{    "image": asset,    "metadata": asset->metadata  },}
export type CompcardQueryResult = {
  _id: string;
  images: Array<{
    image: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    } | null;
    metadata: SanityImageMetadata | null;
  }> | null;
} | null;

// Source: ./sanity/queries/drawing.ts
// Variable: drawingQuery
// Query: *[_type == "drawing"][0]{  _id,  "images": images[]{    "image": asset,    "metadata": asset->metadata  },}
export type DrawingQueryResult = {
  _id: string;
  images: Array<{
    image: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    } | null;
    metadata: SanityImageMetadata | null;
  }> | null;
} | null;

// Source: ./sanity/queries/film.ts
// Variable: filmQuery
// Query: *[_type == "film"][0]{  _id,  "images": images[]{    "image": asset,    "metadata": asset->metadata  },}
export type FilmQueryResult = {
  _id: string;
  images: Array<{
    image: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    } | null;
    metadata: SanityImageMetadata | null;
  }> | null;
} | null;

// Source: ./sanity/queries/siteSetting.ts
// Variable: siteSettingQuery
// Query: *[  _type == "siteSetting"][0]{  _id,  title,  "seo": seo{    description,    keywords,    ogImage,  }}
export type SiteSettingQueryResult = {
  _id: string;
  title: string;
  seo: {
    description: string;
    keywords: Array<string> | null;
    ogImage: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: "image";
    };
  } | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"artwork\"][0]{\n  _id,\n  \"images\": images[]{\n    \"image\": asset,\n    \"metadata\": asset->metadata\n  },\n}": ArtworkQueryResult;
    "*[_type == \"compcard\"][0]{\n  _id,\n  \"images\": images[]{\n    \"image\": asset,\n    \"metadata\": asset->metadata\n  },\n}": CompcardQueryResult;
    "*[_type == \"drawing\"][0]{\n  _id,\n  \"images\": images[]{\n    \"image\": asset,\n    \"metadata\": asset->metadata\n  },\n}": DrawingQueryResult;
    "*[_type == \"film\"][0]{\n  _id,\n  \"images\": images[]{\n    \"image\": asset,\n    \"metadata\": asset->metadata\n  },\n}": FilmQueryResult;
    "*[\n  _type == \"siteSetting\"\n][0]{\n  _id,\n  title,\n  \"seo\": seo{\n    description,\n    keywords,\n    ogImage,\n  }\n}": SiteSettingQueryResult;
  }
}
